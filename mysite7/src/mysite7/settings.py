"""
Django settings for mysite7 project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from django.urls.base import reverse_lazy
from django.conf.global_settings import LOGIN_URL

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'm@0ep8f(w8_u*$0)&8da_u)7g(&v*_bqh(gl*f7bfv*gx-rrbr'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#소셜로그인이 끝난뒤 이동할 메인페이지 주소를 저장하는 변수
#setting.py와 같은 웹서버 로드가 완전히되지않은 공간에서 별칭 기반의 URL검색을 사용하려면 reverse_lazy 함수를 사용해야함
LOGIN_REDIRECT_URL = reverse_lazy('main')
#비로그인 상태에서 로그인이 필요한 기능을 사용했을때 로그인페이지를 띄우기 위해 로그인페이지의 URL을 등록하는 변수
LOGIN_URL = reverse_lazy("cl:signin")


ALLOWED_HOSTS = ['127.0.0.1','pythonanywhere.com']
#social_django에서 인증절차에 사용되는 클래스 등록
AUTHENTICATION_BACKENDS = (
    'social_core.backends.open_id.OpenIdAuth',
    #구글로그인 기능을 사용하기위한 클래스등록
    'social_core.backends.google.GoogleOpenId',
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.google.GoogleOAuth',
    #구글로그인 정보를 django User모델클래스에 연동하기위한 클래스등록
    'django.contrib.auth.backends.ModelBackend',
)
#구글로그인하기에 사용할 요청 ID
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '276388639872-92k6lnas26r32qlvuh96ggltd4lb8e3f.apps.googleusercontent.com'
#요청 PASSWORD
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'lYykUJSi8jDf7aAzHDWWYTp5'


# Application definition
# 해당 웹프로젝트에서 실행할 어플리케이션 목록을 저장하는 변수
#다른개발자가 만든 어플리케이션이나 스스로 만든 어플리케이션을 등록해야
#사용할수있음.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'vote',
    'customlogin',
    #소셜로그인 처리를하는 어플리케이션
    #social-auth-app-django 모듈을 pip로 설치해야 사용가능
    'social_django',
    'blog',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite7.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                #social_django기능을 사용하기위한 설정
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite7.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'ko'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

#사용자가 업로드한 파일을 저장하는 하드디스크 경로 지정
#BASE_DIR : 현재 웹서버의 하드디스크 경로를 저장한 변수
#os.path.join : 하드디스크경로를 합칠 때 사용하는 함수
#사용자가 업로드한 파일은 웹서버폴더/files 폴더에 저장됨
#ex) 1.jpg를 업로드 -> 웹서버폴더/files/1.jpg 저장됨
MEDIA_ROOT = os.path.join(BASE_DIR,'files') 
#사용자가 다운로드받기위한 URL경로를 지정
#사용자가 서버에 저장된 파일을 접근할때는
#127.0.0.1:8000/files/로 시작하는 요청을 인터넷주소로 작성
#ex)127.0.0.1:8000files/1.jpg 요청하면 웹서버폴더/files/1.jpg로 접근 및 클라이언트에게 전달
MEDIA_URL = '/files/'